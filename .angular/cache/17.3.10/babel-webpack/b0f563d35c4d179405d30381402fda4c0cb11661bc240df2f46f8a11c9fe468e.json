{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let SortService = /*#__PURE__*/(() => {\n  class SortService {\n    constructor() {\n      this.arrayToSort = [];\n      this.timeOuts = [];\n      this.intervals = [];\n    }\n    // Repopulate the arrayToSort variable\n    // with random values\n    populateArray() {\n      this.arrayToSort = [];\n      for (let i = 0; i < 100; i++) {\n        this.arrayToSort.push(Math.ceil(Math.random() * 100));\n      }\n    }\n    // Sorts the array with Selection Sort Algorithm\n    onSelectionSort() {\n      // Check that the sort has not yet executed\n      if (this.timeOuts.length > 0) {\n        return;\n      }\n      this.timeOuts = [];\n      let barCount = this.arrayToSort.length;\n      // loop thorugh the length of the array to be sorted\n      // setTimeouts are used to show the animation on screen\n      for (let i = 0; i < barCount - 1; i++) {\n        this.timeOuts.push(setTimeout(() => {\n          // the current index i will be treated as the lowest value\n          let minIndex = i;\n          // Compare each value after minIndex to value of minIndex\n          // if value of minIndex is greater than the value to be compared\n          // changed the minIndex to the index of the value to be compared (Confusing @.@)\n          for (let j = i + 1; j < barCount; j++) {\n            if (this.arrayToSort[j] < this.arrayToSort[minIndex]) {\n              minIndex = j;\n            }\n          }\n          // swap the value of the minIndex to the value of current i\n          let temp = this.arrayToSort[minIndex];\n          this.arrayToSort[minIndex] = this.arrayToSort[i];\n          this.arrayToSort[i] = temp;\n          this.generateBars(\"selection\");\n          if (i === barCount - 2) {\n            this.showReset();\n          }\n        }, i * 50));\n      }\n    }\n    // Sorts the array with Bubble Sort Algorithm\n    onBubbleSort() {\n      // Check that the sort has not yet executed\n      if (this.timeOuts.length > 0) {\n        return;\n      }\n      this.timeOuts = [];\n      let barCount = this.arrayToSort.length;\n      // Loop through the whole array once\n      for (let i = 0; i < barCount - 1; i++) {\n        this.timeOuts.push(setTimeout(() => {\n          // within its iteration of the outer loop, through the array again starting from index 0 always until\n          // length of the array minus the current value of i to avoid sorting the last part (already sorted, biggest values are pushed to the end)\n          for (let j = 0; j < barCount - i - 1; j++) {\n            this.timeOuts.push(setTimeout(() => {\n              // Compare the value of current index j to the one next to it and swap if value of current index j is greater than the next value\n              if (this.arrayToSort[j] > this.arrayToSort[j + 1]) {\n                let temp = this.arrayToSort[j];\n                this.arrayToSort[j] = this.arrayToSort[j + 1];\n                this.arrayToSort[j + 1] = temp;\n                this.generateBars(\"bubble\");\n              }\n              if (i === barCount - 2) {\n                this.showReset();\n              }\n            }, i * 2));\n          }\n        }, i));\n      }\n    }\n    onInsertionSort() {\n      this.intervals = [];\n      let barCount = this.arrayToSort.length;\n      let insertionTracker = 1;\n      const inserttionInterval = setInterval(() => {\n        this.intervals.push(setInterval(() => {\n          let key = this.arrayToSort[insertionTracker];\n          let j = insertionTracker - 1;\n          while (j >= 0 && this.arrayToSort[j] > key) {\n            this.arrayToSort[j + 1] = this.arrayToSort[j];\n            j -= 1;\n            // this.generateBars(\"insertion\");\n          }\n          this.arrayToSort[j + 1] = key;\n          this.generateBars(\"insertion\");\n          insertionTracker++;\n          if (insertionTracker === barCount) {\n            clearInterval(inserttionInterval);\n            this.killAnimation();\n            this.showReset();\n          }\n        }, insertionTracker * 200));\n      }, 100);\n      // for (let i = 1; i < barCount; i++) {\n      //   this.timeOuts.push(\n      //     setTimeout(() => {\n      //       let key = this.arrayToSort[i];\n      //       let j = i - 1;\n      //       while (j >= 0 && this.arrayToSort[j] > key) {\n      //         this.arrayToSort[j + 1] = this.arrayToSort[j];\n      //         j -= 1;\n      //         this.generateBars(\"insertion\");\n      //       }\n      //       this.arrayToSort[j + 1] = key;\n      //       this.generateBars(\"insertion\");\n      //     }, i)\n      //   );\n      //  }\n    }\n    onQuickSort(low, high) {\n      this.timeOuts = [];\n      this.timeOuts.push(setTimeout(() => {\n        if (low < high) {\n          let pivot = this.arrayToSort[high];\n          let i = low - 1;\n          for (var j = low; j < high; j++) {\n            if (this.arrayToSort[j] < pivot) {\n              i++;\n              let temp = this.arrayToSort[i];\n              this.arrayToSort[i] = this.arrayToSort[j];\n              this.arrayToSort[j] = temp;\n              this.generateBars(\"quick\");\n            }\n          }\n          let temp1 = this.arrayToSort[i + 1];\n          this.arrayToSort[i + 1] = this.arrayToSort[high];\n          this.arrayToSort[high] = temp1;\n          this.generateBars(\"quick\");\n          i = i + 1;\n          this.onQuickSort(low, i - 1);\n          this.onQuickSort(i + 1, high);\n        } else {\n          this.showReset();\n        }\n      }));\n    }\n    generateBars(sortType) {\n      // get the element that will contain the algorithm animation\n      const visualContainer = document.querySelector(\".algo-visual\");\n      // Clear the elements inside\n      // This is needed because this function will be called in each iteration of the sort\n      visualContainer.innerHTML = \"\";\n      // Add the sort button\n      var sortButton = document.createElement(\"button\");\n      sortButton.innerHTML = \"Sort\";\n      sortButton.classList.add(\"sort-btn\");\n      // Determine the type of sort that the button will execute\n      switch (sortType) {\n        case \"selection\":\n          {\n            sortButton.addEventListener(\"click\", this.onSelectionSort.bind(this));\n            break;\n          }\n        case \"bubble\":\n          {\n            sortButton.addEventListener(\"click\", this.onBubbleSort.bind(this));\n            break;\n          }\n        case \"insertion\":\n          {\n            sortButton.addEventListener(\"click\", this.onInsertionSort.bind(this));\n            break;\n          }\n        case \"quick\":\n          {\n            sortButton.addEventListener(\"click\", this.onQuickSort.bind(this, 0, this.arrayToSort.length - 1));\n            break;\n          }\n      }\n      visualContainer.appendChild(sortButton);\n      // Loop through the array to sort and create a div element\n      // based on the random value\n      this.arrayToSort.forEach(size => {\n        const bar = document.createElement(\"div\");\n        bar.style.height = Math.floor(size / 100 * visualContainer.clientHeight) + \"px\";\n        let width = Math.ceil((visualContainer.clientWidth - 200) / 100);\n        bar.style.width = width + \"px\";\n        bar.setAttribute(\"class\", \"bar\");\n        visualContainer.appendChild(bar);\n      });\n    }\n    killAnimation() {\n      this.timeOuts.forEach(timeOut => {\n        clearTimeout(timeOut);\n      });\n      this.intervals.forEach(timeOut => {\n        clearInterval(timeOut);\n      });\n    }\n    languageSelect(language, sortType) {\n      let languageUrl = \"\";\n      let languages = document.querySelectorAll(\".language\");\n      languages.forEach(language => {\n        // (language as HTMLElement).style.borderBottom = \"none\";\n        language.classList.remove(\"active-menu\");\n      });\n      switch (language) {\n        case \"cplusplus\":\n          {\n            languageUrl = \"../../../assets/sample_code/sort/\" + sortType + \"/cplusplus.PNG\";\n            let el = document.querySelector(\"#cplusplus\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n        case \"c\":\n          {\n            languageUrl = \"../../../assets/sample_code/sort/\" + sortType + \"/c.PNG\";\n            let el = document.querySelector(\"#c\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n        case \"python\":\n          {\n            languageUrl = \"../../../assets/sample_code/sort/\" + sortType + \"/python.PNG\";\n            let el = document.querySelector(\"#python\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n        case \"java\":\n          {\n            languageUrl = \"../../../assets/sample_code/sort/\" + sortType + \"/java.PNG\";\n            let el = document.querySelector(\"#java\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n        case \"csharp\":\n          {\n            languageUrl = \"../../../assets/sample_code/sort/\" + sortType + \"/csharp.PNG\";\n            let el = document.querySelector(\"#csharp\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n        case \"php\":\n          {\n            languageUrl = \"../../../assets/sample_code/sort/\" + sortType + \"/php.PNG\";\n            let el = document.querySelector(\"#php\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n      }\n      return languageUrl;\n    }\n    showReset() {\n      const visualContainer = document.querySelector(\".algo-visual\");\n      let resetContainer = document.createElement(\"div\");\n      resetContainer.style.margin = \"auto\";\n      resetContainer.style.top = \"35%\";\n      resetContainer.style.position = \"absolute\";\n      resetContainer.style.zIndex = \"999\";\n      resetContainer.style.background = \"#fff\";\n      resetContainer.style.border = \"1px solid grey\";\n      resetContainer.style.padding = \"10px\";\n      resetContainer.style.borderRadius = \"4px\";\n      resetContainer.style.textAlign = \"center\";\n      resetContainer.style.minWidth = \"100px\";\n      let found = document.createElement(\"p\");\n      found.innerHTML = \"Reset\";\n      let resetBtn = document.createElement(\"button\");\n      resetBtn.innerHTML = \"Reset\";\n      resetBtn.style.borderRadius = \"4px\";\n      resetBtn.style.padding = \"5px\";\n      resetBtn.style.background = \"#1fa638\";\n      resetBtn.style.border = \"none\";\n      resetBtn.style.cursor = \"pointer\";\n      resetBtn.addEventListener(\"click\", () => {\n        window.location.reload();\n      });\n      resetContainer.appendChild(found);\n      resetContainer.appendChild(resetBtn);\n      visualContainer.appendChild(resetContainer);\n    }\n    static #_ = this.ɵfac = function SortService_Factory(t) {\n      return new (t || SortService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SortService,\n      factory: SortService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return SortService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}