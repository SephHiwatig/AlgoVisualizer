{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let SearchSeervice = /*#__PURE__*/(() => {\n  class SearchSeervice {\n    constructor() {\n      this.arrayToSearch = [];\n      this.timeOuts = [];\n    }\n    populateArray() {\n      this.numOfBoxes = 10;\n      this.arrayToSearch = [];\n      for (let i = 0; i < 10; i++) {\n        this.arrayToSearch.push(Math.ceil(Math.random() * 100));\n      }\n      const randomIndex = Math.ceil(Math.random() * 10) - 1;\n      this.valueToSearch = this.arrayToSearch[randomIndex];\n    }\n    populateSortedArray() {\n      this.numOfBoxes = 20;\n      this.arrayToSearch = [];\n      let multiplier = Math.ceil(Math.random() * 5);\n      for (let i = 0; i < 20; i++) {\n        this.arrayToSearch.push(i * multiplier);\n      }\n      const randomIndex = Math.ceil(Math.random() * 20) - 1;\n      this.valueToSearch = this.arrayToSearch[randomIndex];\n    }\n    onLinearSearch() {\n      const searchBtn = document.querySelector(\"#searchBtn\");\n      searchBtn.disabled = true;\n      const boxCount = this.arrayToSearch.length;\n      const boxes = document.querySelectorAll(\".box\");\n      for (let i = 0; i < boxCount; i++) {\n        this.timeOuts.push(setTimeout(() => {\n          boxes[i].style.backgroundColor = \"#e91e63\";\n          if (i > 0) {\n            boxes[i - 1].style.backgroundColor = \"#428df5\";\n          }\n          if (this.arrayToSearch[i] === this.valueToSearch) {\n            this.killAnimation();\n            boxes[i].style.backgroundColor = \"green\";\n            this.showReset(() => {\n              this.populateArray();\n              this.generateBoxes(\"linear\");\n            }, i);\n          }\n        }, i * 1000));\n      }\n    }\n    onBinarySearch() {\n      const searchBtn = document.querySelector(\"#searchBtn\");\n      searchBtn.disabled = true;\n      const boxes = document.querySelectorAll(\".box\");\n      let min = 0;\n      let max = this.arrayToSearch.length - 1;\n      let previousMid;\n      for (let i = 0; i < 5; i++) {\n        this.timeOuts.push(setTimeout(() => {\n          if (previousMid) {\n            boxes[previousMid].style.backgroundColor = \"#000\";\n          }\n          let mid = Math.floor(min + (max - min) / 2);\n          previousMid = mid;\n          boxes[mid].style.backgroundColor = \"#e91e63\";\n          if (this.arrayToSearch[mid] === this.valueToSearch) {\n            boxes[mid].style.backgroundColor = \"green\";\n            this.killAnimation();\n            this.showReset(() => {\n              this.populateSortedArray();\n              this.generateBoxes(\"binary\");\n            }, mid);\n            i = 5;\n          }\n          if (this.arrayToSearch[mid] < this.valueToSearch) min = mid + 1;else max = mid - 1;\n        }, i * 1000));\n      }\n    }\n    onJumpSearch() {\n      const searchBtn = document.querySelector(\"#searchBtn\");\n      searchBtn.disabled = true;\n      const boxes = document.querySelectorAll(\".box\");\n      let boxCount = this.arrayToSearch.length;\n      let step = Math.floor(Math.sqrt(boxCount));\n      let prev = 0;\n      boxes[prev].style.backgroundColor = \"#e91e63\";\n      let tempInt = setInterval(() => {\n        if (this.arrayToSearch[Math.min(step, boxCount) - 1] < this.valueToSearch) {\n          prev = step;\n          boxes[prev].style.backgroundColor = \"#e91e63\";\n          step += Math.floor(Math.sqrt(boxCount));\n        } else {\n          if (boxes[step]) {\n            boxes[step].style.backgroundColor = \"#e91e63\";\n          }\n          clearInterval(tempInt);\n          let tempInt2 = setInterval(() => {\n            if (this.arrayToSearch[prev] < this.valueToSearch) {\n              boxes[prev].style.backgroundColor = \"#e9a21e\";\n              prev++;\n              if (prev == Math.min(step, boxCount)) {\n                clearInterval(tempInt2);\n              }\n            } else {\n              if (this.arrayToSearch[prev] == this.valueToSearch) {\n                boxes[prev].style.backgroundColor = \"green\";\n                clearInterval(tempInt2);\n                this.showReset(() => {\n                  this.populateSortedArray();\n                  this.generateBoxes(\"jump\");\n                }, prev);\n              }\n            }\n          }, 1000);\n        }\n      }, 1000);\n    }\n    generateBoxes(searchType) {\n      const visualContainer = document.querySelector(\".algo-visual\");\n      visualContainer.innerHTML = \"\";\n      let searchBtn = document.createElement(\"button\");\n      searchBtn.innerHTML = \"Search \" + this.valueToSearch;\n      searchBtn.setAttribute(\"id\", \"searchBtn\");\n      searchBtn.setAttribute(\"class\", \"search-btn\");\n      switch (searchType) {\n        case \"linear\":\n          {\n            searchBtn.addEventListener(\"click\", this.onLinearSearch.bind(this));\n            break;\n          }\n        case \"binary\":\n          {\n            searchBtn.addEventListener(\"click\", this.onBinarySearch.bind(this));\n            break;\n          }\n        case \"jump\":\n          {\n            searchBtn.addEventListener(\"click\", this.onJumpSearch.bind(this));\n            break;\n          }\n      }\n      visualContainer.appendChild(searchBtn);\n      visualContainer.style.alignItems = \"center\";\n      this.arrayToSearch.forEach(num => {\n        const box = document.createElement(\"div\");\n        const size = Math.ceil((visualContainer.clientWidth - this.numOfBoxes * 2) / this.numOfBoxes);\n        box.style.width = size + \"px\";\n        box.style.height = size + \"px\";\n        box.style.marginLeft = \"1px\";\n        box.style.marginRight = \"1px\";\n        box.style.borderRadius = \"4px\";\n        box.style.backgroundColor = \"#428df5\";\n        box.style.textAlign = \"center\";\n        box.style.verticalAlign = \"middle\";\n        box.style.lineHeight = size + \"px\";\n        box.style.fontSize = \"large\";\n        box.innerHTML = num;\n        box.style.color = \"#fff\";\n        box.setAttribute(\"class\", \"box\");\n        visualContainer.appendChild(box);\n      });\n    }\n    languageSelect(language, searchType) {\n      let languageUrl = \"\";\n      let languages = document.querySelectorAll(\".language\");\n      languages.forEach(language => {\n        language.classList.remove(\"active-menu\");\n      });\n      switch (language) {\n        case \"cplusplus\":\n          {\n            languageUrl = \"../../../assets/sample_code/search/\" + searchType + \"/cplusplus.PNG\";\n            let el = document.querySelector(\"#cplusplus\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n        case \"c\":\n          {\n            languageUrl = \"../../../assets/sample_code/search/\" + searchType + \"/c.PNG\";\n            let el = document.querySelector(\"#c\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n        case \"python\":\n          {\n            languageUrl = \"../../../assets/sample_code/search/\" + searchType + \"/python.PNG\";\n            let el = document.querySelector(\"#python\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n        case \"java\":\n          {\n            languageUrl = \"../../../assets/sample_code/search/\" + searchType + \"/java.PNG\";\n            let el = document.querySelector(\"#java\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n        case \"csharp\":\n          {\n            languageUrl = \"../../../assets/sample_code/search/\" + searchType + \"/csharp.PNG\";\n            let el = document.querySelector(\"#csharp\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n        case \"php\":\n          {\n            languageUrl = \"../../../assets/sample_code/search/\" + searchType + \"/php.PNG\";\n            let el = document.querySelector(\"#php\");\n            el.classList.add(\"active-menu\");\n            break;\n          }\n      }\n      return languageUrl;\n    }\n    killAnimation() {\n      this.timeOuts.forEach(to => {\n        clearTimeout(to);\n      });\n      this.timeOuts = [];\n    }\n    showReset(btnAction, index) {\n      const visualContainer = document.querySelector(\".algo-visual\");\n      let resetContainer = document.createElement(\"div\");\n      resetContainer.style.margin = \"auto\";\n      resetContainer.style.position = \"absolute\";\n      resetContainer.style.zIndex = \"999\";\n      resetContainer.style.background = \"#fff\";\n      resetContainer.style.border = \"1px solid grey\";\n      resetContainer.style.padding = \"10px\";\n      resetContainer.style.borderRadius = \"4px\";\n      resetContainer.style.textAlign = \"center\";\n      let found = document.createElement(\"p\");\n      found.innerHTML = \"Found \" + this.valueToSearch + \" at index \" + index + \"!\";\n      let resetBtn = document.createElement(\"button\");\n      resetBtn.innerHTML = \"Reset\";\n      resetBtn.style.borderRadius = \"4px\";\n      resetBtn.style.padding = \"5px\";\n      resetBtn.style.background = \"#1fa638\";\n      resetBtn.style.border = \"none\";\n      resetBtn.style.cursor = \"pointer\";\n      resetBtn.addEventListener(\"click\", btnAction);\n      resetContainer.appendChild(found);\n      resetContainer.appendChild(resetBtn);\n      visualContainer.appendChild(resetContainer);\n    }\n    static #_ = this.ɵfac = function SearchSeervice_Factory(t) {\n      return new (t || SearchSeervice)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SearchSeervice,\n      factory: SearchSeervice.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return SearchSeervice;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}