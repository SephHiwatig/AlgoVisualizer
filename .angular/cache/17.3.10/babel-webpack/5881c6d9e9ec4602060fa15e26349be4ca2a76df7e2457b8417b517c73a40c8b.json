{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../path.service\";\nexport let DijkstraComponent = /*#__PURE__*/(() => {\n  class DijkstraComponent {\n    constructor(pathService) {\n      this.pathService = pathService;\n    }\n    ngOnInit() {\n      this.pathService.generateGrid();\n    }\n    onSearch() {\n      this.pathService.startDijkstra();\n    }\n    static #_ = this.ɵfac = function DijkstraComponent_Factory(t) {\n      return new (t || DijkstraComponent)(i0.ɵɵdirectiveInject(i1.PathService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DijkstraComponent,\n      selectors: [[\"app-dijkstra\"]],\n      decls: 13,\n      vars: 0,\n      consts: [[1, \"algo-container\"], [1, \"algo-info\"], [\"href\", \"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\", \"target\", \"_blank\"], [\"type\", \"button\", 1, \"searchBtn\", 3, \"click\"], [1, \"algo-visual\"]],\n      template: function DijkstraComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"h1\");\n          i0.ɵɵtext(3, \"Dijkstra's Shortest Path\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\");\n          i0.ɵɵtext(5, \" Dijkstra's algorithm (or Dijkstra's Shortest Path First algorithm, SPF algorithm) is an algorithm for finding the shortest paths between nodes in a graph, which may represent, for example, road networks. It was conceived by computer scientist Edsger W. Dijkstra in 1956 and published three years later. \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"small\")(7, \"a\", 2);\n          i0.ɵɵtext(8, \"Source: https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"div\")(10, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function DijkstraComponent_Template_button_click_10_listener() {\n            return ctx.onSearch();\n          });\n          i0.ɵɵtext(11, \" Search \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(12, \"div\", 4);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"[_nghost-%COMP%]  .col:hover{transform:scale(1.1);transition:.1s ease-in-out;border:1px solid grey!important}.algo-visual[_ngcontent-%COMP%]{background-color:#000000b3!important}[_nghost-%COMP%]  .col{transition:ease-in-out}.searchBtn[_ngcontent-%COMP%]{background-color:#1fa638;padding:10px;border:1px solid #1fa638;color:#fff;border-radius:4px;cursor:pointer}\", \"[_nghost-%COMP%]  .row{width:100%;display:flex;flex:1}[_nghost-%COMP%]  .col{flex:1;background-color:#fff;border-radius:4px;margin:1px;border:1px solid #fff;cursor:pointer;display:flex;transition:background-color .5s ease}[_nghost-%COMP%]  .node{margin:auto;max-width:60%;max-height:60%}\"]\n    });\n  }\n  return DijkstraComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}